/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual.alumno;

import java.awt.Color;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableModel;
import modelo.cursos.Curso;
import modelo.cursos.CursosFinalizados;
import modelo.instituto.Instituto;
import modelo.usuarios.Alumno;
import visual.admin.JDialogDeseaContinuar;

/**
 *
 * @author user
 */
public class cursosDisponibles extends javax.swing.JFrame {

    Alumno userAlumno;
    Instituto instituto;
    DefaultTableModel modeloTabla;
    
    public cursosDisponibles(Alumno alumno, Instituto instituto) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.userAlumno = alumno;
        this.instituto = instituto;
        modeloTabla = (DefaultTableModel) jTable1.getModel();
        cargarTabla(modeloTabla);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        btnInscripcion = new javax.swing.JButton();
        lblRegresar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );

        jLabel10.setFont(new java.awt.Font("Segoe UI Historic", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Cursos disponibles");

        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 102), 1, true));
        jTable1.setFont(new java.awt.Font("Segoe UI Historic", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 51, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Descripci√≥n", "Docente", "Estado ", "Correlativa 1", "Correlativa 2"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable1.getTableHeader().setResizingAllowed(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);

        jPanel7.setBackground(new java.awt.Color(0, 67, 135));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 820, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 12, Short.MAX_VALUE)
        );

        btnInscripcion.setBackground(new java.awt.Color(0, 67, 135));
        btnInscripcion.setFont(new java.awt.Font("Segoe UI Historic", 1, 12)); // NOI18N
        btnInscripcion.setForeground(new java.awt.Color(255, 255, 255));
        btnInscripcion.setText("INSCRIBIRME");
        btnInscripcion.setBorder(null);
        btnInscripcion.setContentAreaFilled(false);
        btnInscripcion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnInscripcion.setFocusable(false);
        btnInscripcion.setOpaque(true);
        btnInscripcion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnInscripcionMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnInscripcionMouseExited(evt);
            }
        });
        btnInscripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInscripcionActionPerformed(evt);
            }
        });

        lblRegresar.setFont(new java.awt.Font("Segoe UI Historic", 1, 14)); // NOI18N
        lblRegresar.setForeground(new java.awt.Color(240, 240, 240));
        lblRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visual/imagenes/volverAtras2.png"))); // NOI18N
        lblRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRegresarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnInscripcion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblRegresar)
                        .addGap(316, 316, 316)
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnInscripcion, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 410, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInscripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInscripcionActionPerformed
        int filaSeleccionada = jTable1.getSelectedRow();
        String idSeleccionado = modeloTabla.getValueAt(filaSeleccionada, 0).toString();
        int id = Integer.parseInt(idSeleccionado);
        
        //agregar a curso al alumno y el alumno al curso;
        ArrayList<Alumno> alumnos = instituto.getAlumnos();
        ArrayList<Curso> cursos = instituto.getCursos();
        if (filaSeleccionada != -1) { // Verificar si se seleccion√≥ alguna fila      

        // Obtener el curso seleccionado por su ID
        Curso cursoSeleccionado = null;
        for (Curso curso : instituto.getCursos()) {
            if (curso.getId() == id) {
                cursoSeleccionado = curso;
                break;
            }
        }
            // Verificar si se encontr√≥ el curso
            if (cursoSeleccionado != null) {
                // Obtener el alumno (puedes obtenerlo de alguna manera seg√∫n tu implementacion) 

                if (this.userAlumno != null) {
                    JDialogDeseaContinuar dialog = new JDialogDeseaContinuar(this, true);
                    dialog.setVisible(true);
                    int seleccion = dialog.getReturnStatus();
                    if(seleccion == 1)
                    {
                        cursoSeleccionado.agregarAlumno(this.userAlumno);
                        this.userAlumno.agregarCurso(cursoSeleccionado);
                        serializarInstituto();
                        modeloTabla.setRowCount(0);
                        cargarTabla(modeloTabla);
                    }


                }
            }       
        }
        
    }
    
    
    public ArrayList<String> obtenerCursosFin()
    {
        ArrayList<CursosFinalizados> cf = userAlumno.getCursosFinalizados();
        ArrayList<String> idList = new ArrayList();
        
        for(CursosFinalizados cursos : cf)
        {
           if(cursos.getEstado().equals("aprobado"))
           idList.add(String.valueOf(cursos.getCurso().getId()));
        
        }
        
        return idList;
    }
    
    public boolean comprobarIds(ArrayList<String> ids, Curso curso) {
         ArrayList<Curso> cursosRequeridos = curso.getRequisitos();

       
        if (cursosRequeridos == null) {
            return true; 
        }

        // Iterar sobre los cursos requeridos
        for (Curso cursoRequerido : cursosRequeridos) {
            String idCursoRequerido = String.valueOf(cursoRequerido.getId());
            
            // Verificar si el ID del curso requerido no est√° presente en el ArrayList de IDs
            if (!ids.contains(idCursoRequerido)) {
                return false; // Si un ID requerido no est√° presente, retorna false
            }
        }

        return true; // Si todos los IDs requeridos est√°n presentes o si el ArrayList de IDs est√° vac√≠o, retorna true
    }

    
    
    public boolean encontrarCursoActivo(Curso curso)
    {
       ArrayList<Curso> cursosAlumno = this.userAlumno.getCursos(); // Suponiendo que tienes un objeto alumno

        // Verificar si el curso est√° presente en la lista de cursos del alumno
        for (Curso cursoAlumno : cursosAlumno) {
            if (cursoAlumno.equals(curso)) {
                return true; // Si se encuentra el curso, devuelve true
            }
        }
    return false;
    }
    
    public boolean encontrarCursoFinalizado(Curso curso)
    {
        ArrayList<CursosFinalizados> cursosFinalizadosAlumno = this.userAlumno.getCursosFinalizados(); // Suponiendo que tienes un objeto alumno

        // Verificar si el curso est√° presente en la lista de cursos del alumno
        for (CursosFinalizados cursoFinalizadoAlumno : cursosFinalizadosAlumno) {
            if (cursoFinalizadoAlumno.getCurso().getDescripcion().equals(curso.getDescripcion())) {
                return true; // Si se encuentra el curso, devuelve true
            }
        }
    return false;
    }
    
    public void cargarTabla(DefaultTableModel modeloTabla) {
    ArrayList<Curso> cursos = instituto.getCursos();
    ArrayList<Curso> cursosMostrar = new ArrayList<>();
    ArrayList<Curso> cursosFinal = new ArrayList<>();
    ArrayList<Curso> cursosAlumno = this.userAlumno.getCursos();   // Obtener los IDs de los cursos finalizados del alumno
    ArrayList<String> idCursosFinalizados = obtenerCursosFin();

    // Filtrar cursos habilitados y que cumplen con los requisitos
    for (Curso curso : cursos) {
        if (curso.getEstado().equals("habilitado") && curso.getTopeAlumnos() >= curso.getContador() &&
            comprobarIds(idCursosFinalizados, curso) && !encontrarCursoActivo(curso) && !encontrarCursoFinalizado(curso)) {
            cursosMostrar.add(curso);
        }
    }
    int i = 0;
    for (Curso curso : cursosAlumno) {
        if (curso.equals(cursosMostrar.get(i))) {
            cursosMostrar.remove(curso);
        }
        i++;
    }
    

    // Agregar filas al modeloTabla
    for (Curso curso : cursosMostrar){
        if(curso.getRequisitos().size() == 2){
            Object[] fila = {curso.getId(), curso.getDescripcion(), curso.getDocente().getApellido(), curso.getEstado(), curso.getRequisitos().get(0).getDescripcion(), curso.getRequisitos().get(1).getDescripcion()};
            modeloTabla.addRow(fila);
        }else if(curso.getRequisitos().size() == 1){
                Object[] fila = {curso.getId(), curso.getDescripcion(), curso.getDocente().getApellido(), curso.getEstado(), curso.getRequisitos().get(0).getDescripcion()};
                modeloTabla.addRow(fila);
        }else if(curso.getRequisitos().isEmpty()){
                Object[] fila = {curso.getId(), curso.getDescripcion(), curso.getDocente().getApellido(), curso.getEstado()};
                modeloTabla.addRow(fila);
            }
      
    }
    }//GEN-LAST:event_btnInscripcionActionPerformed

    
    
    private void lblRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegresarMouseClicked
        dispose();
        new visualAlumno(this.userAlumno,this.instituto).setVisible(true);
    }//GEN-LAST:event_lblRegresarMouseClicked

    private void btnInscripcionMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInscripcionMouseEntered
        btnInscripcion.setBackground(new Color(0,56,110));
    }//GEN-LAST:event_btnInscripcionMouseEntered

    private void btnInscripcionMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInscripcionMouseExited
        btnInscripcion.setBackground(new Color(0,67,135));
    }//GEN-LAST:event_btnInscripcionMouseExited
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInscripcion;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblRegresar;
    // End of variables declaration//GEN-END:variables

     private static void setUnderline(JLabel label, boolean underline) {
        Font font = label.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());
        attributes.put(TextAttribute.UNDERLINE, underline ? TextAttribute.UNDERLINE_ON : null);
        label.setFont(font.deriveFont(attributes));
    }
    
     public void serializarInstituto()
    {
        try {
            FileOutputStream archivoSalida = new FileOutputStream("instituto_serializados.dat");
            ObjectOutputStream objetoSalida = new ObjectOutputStream(archivoSalida);
            objetoSalida.writeObject(instituto);
            objetoSalida.close();
            archivoSalida.close();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }
}
