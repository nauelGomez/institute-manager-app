/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visual.docente;

import java.awt.Color;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import modelo.cursos.Curso;
import modelo.cursos.CursosFinalizados;
import modelo.instituto.Instituto;
import modelo.usuarios.Alumno;
import modelo.usuarios.Docente;

/**
 *
 * @author user
 */
public class asignarNotas extends javax.swing.JFrame {

    /**
     
Creates new form finalizarCurso*/
  Docente userDocente;
  Instituto instituto;
  DefaultTableModel modeloTabla;
  Curso curso;
  
  public asignarNotas(Docente docente, Instituto instituto, Curso curso) {
      initComponents();
      this.setLocationRelativeTo(null);
      this.userDocente = docente;
      this.instituto = instituto;
      this.curso = curso;
      modeloTabla = (DefaultTableModel) jTable1.getModel();
      cargarTabla(modeloTabla);}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblRegresar = new javax.swing.JLabel();
        btnAusente = new javax.swing.JButton();
        btnDesaprobado = new javax.swing.JButton();
        btnAprobar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 51, 102));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 518, Short.MAX_VALUE)
        );

        jLabel10.setFont(new java.awt.Font("Segoe UI Historic", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(240, 240, 240));
        jLabel10.setText("Asignar notas");

        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 51, 102), 1, true));
        jTable1.setFont(new java.awt.Font("Segoe UI Historic", 0, 14)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 51, 102));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Nombre", "Apellido", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setGridColor(new java.awt.Color(0, 51, 102));
        jScrollPane1.setViewportView(jTable1);

        lblRegresar.setFont(new java.awt.Font("Segoe UI Historic", 1, 14)); // NOI18N
        lblRegresar.setForeground(new java.awt.Color(240, 240, 240));
        lblRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/visual/imagenes/volverAtras2.png"))); // NOI18N
        lblRegresar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblRegresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblRegresarMouseClicked(evt);
            }
        });

        btnAusente.setBackground(new java.awt.Color(0, 67, 135));
        btnAusente.setFont(new java.awt.Font("Segoe UI Historic", 1, 12)); // NOI18N
        btnAusente.setForeground(new java.awt.Color(255, 255, 255));
        btnAusente.setText("AUSENTE");
        btnAusente.setBorder(null);
        btnAusente.setContentAreaFilled(false);
        btnAusente.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnAusente.setFocusable(false);
        btnAusente.setOpaque(true);
        btnAusente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAusenteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAusenteMouseExited(evt);
            }
        });
        btnAusente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAusenteActionPerformed(evt);
            }
        });

        btnDesaprobado.setBackground(new java.awt.Color(0, 67, 135));
        btnDesaprobado.setFont(new java.awt.Font("Segoe UI Historic", 1, 12)); // NOI18N
        btnDesaprobado.setForeground(new java.awt.Color(255, 255, 255));
        btnDesaprobado.setText("DESAPROBADO");
        btnDesaprobado.setBorder(null);
        btnDesaprobado.setContentAreaFilled(false);
        btnDesaprobado.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDesaprobado.setFocusable(false);
        btnDesaprobado.setOpaque(true);
        btnDesaprobado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDesaprobadoMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDesaprobadoMouseExited(evt);
            }
        });
        btnDesaprobado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesaprobadoActionPerformed(evt);
            }
        });

        btnAprobar.setBackground(new java.awt.Color(0, 67, 135));
        btnAprobar.setFont(new java.awt.Font("Segoe UI Historic", 1, 12)); // NOI18N
        btnAprobar.setForeground(new java.awt.Color(255, 255, 255));
        btnAprobar.setText("APROBADO");
        btnAprobar.setBorder(null);
        btnAprobar.setContentAreaFilled(false);
        btnAprobar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAprobar.setFocusable(false);
        btnAprobar.setOpaque(true);
        btnAprobar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAprobarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAprobarMouseExited(evt);
            }
        });
        btnAprobar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAprobarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnAprobar, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(43, 43, 43)
                        .addComponent(btnDesaprobado, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAusente, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblRegresar)
                .addGap(238, 238, 238)
                .addComponent(jLabel10)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(lblRegresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAusente, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDesaprobado, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAprobar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lblRegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblRegresarMouseClicked
        this.setVisible(false);
        new cursosActivos(this.userDocente,this.instituto).setVisible(true);
    }//GEN-LAST:event_lblRegresarMouseClicked

    private void btnAusenteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAusenteMouseEntered
        btnAusente.setBackground(new Color(0,56,110));
    }//GEN-LAST:event_btnAusenteMouseEntered

    private void btnAusenteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAusenteMouseExited
        btnAusente.setBackground(new Color(0,67,135));
    }//GEN-LAST:event_btnAusenteMouseExited

    private void btnAusenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAusenteActionPerformed
          int filaSeleccionada = obtenerFilaSeleccionada();
    String idSeleccionado = modeloTabla.getValueAt(filaSeleccionada, 0).toString();
    int id = Integer.parseInt(idSeleccionado);
    
    // Crear el curso aprobado
    CursosFinalizados cursoAprobado = new CursosFinalizados(this.curso, "ausente");
    
    // Iterar sobre la lista de alumnos
    ArrayList<Alumno> alumnos = instituto.getAlumnos();
    for (Alumno alumno : alumnos) {
        if (id == alumno.getId()) {
            // Verificar si el curso ya está en la lista de cursos finalizados del alumno
            boolean cursoEncontrado = false;
            for (CursosFinalizados cursoFinalizado : alumno.getCursosFinalizados()) {
                if (cursoFinalizado.getCurso().equals(this.curso)) {
                    // El curso ya está en la lista de cursos finalizados
                    // Actualizar el estado del curso
                    cursoFinalizado.setEstado("ausente");
                    cursoEncontrado = true;
                    break;
                }
            }
            // Si el curso no se encontró en la lista de cursos finalizados, agregarlo
            if (!cursoEncontrado) {
                alumno.agregarCursoFinalizado(cursoAprobado);
            }
            // Actualizar el estado del alumno a 'aprobado' para este curso
            alumno.actualizarEstadoCurso(this.curso, "ausente");
            
            // Romper el bucle una vez que se haya encontrado el alumno
            break;
        }
        }
        modeloTabla.setRowCount(0);
        cargarTabla(modeloTabla);
        serializarInstituto();
    }//GEN-LAST:event_btnAusenteActionPerformed

    private void btnDesaprobadoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDesaprobadoMouseEntered
         btnDesaprobado.setBackground(new Color(0,56,110));
    }//GEN-LAST:event_btnDesaprobadoMouseEntered

    private void btnDesaprobadoMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDesaprobadoMouseExited
        btnDesaprobado.setBackground(new Color(0,67,135));
    }//GEN-LAST:event_btnDesaprobadoMouseExited

    private void btnDesaprobadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesaprobadoActionPerformed
        int filaSeleccionada = obtenerFilaSeleccionada();
    String idSeleccionado = modeloTabla.getValueAt(filaSeleccionada, 0).toString();
    int id = Integer.parseInt(idSeleccionado);

    // Crear el curso aprobado
    CursosFinalizados cursoAprobado = new CursosFinalizados(this.curso, "desaprobado");

    // Iterar sobre la lista de alumnos
    ArrayList<Alumno> alumnos = instituto.getAlumnos();
    for (Alumno alumno : alumnos) {
        if (id == alumno.getId()) {
            // Verificar si el curso ya está en la lista de cursos finalizados del alumno
            boolean cursoEncontrado = false;
            for (CursosFinalizados cursoFinalizado : alumno.getCursosFinalizados()) {
                if (cursoFinalizado.getCurso().equals(this.curso)) {
                    // El curso ya está en la lista de cursos finalizados
                    // Actualizar el estado del curso
                    cursoFinalizado.setEstado("desaprobado");
                    cursoEncontrado = true;
                    break;
                }
            }
            // Si el curso no se encontró en la lista de cursos finalizados, agregarlo
            if (!cursoEncontrado) {
                alumno.agregarCursoFinalizado(cursoAprobado);
            }
            // Actualizar el estado del alumno a 'aprobado' para este curso
            alumno.actualizarEstadoCurso(this.curso, "desaprobado");
            // Romper el bucle una vez que se haya encontrado el alumno
            break;
        }
        }
        modeloTabla.setRowCount(0);
        cargarTabla(modeloTabla);
        serializarInstituto();
    }//GEN-LAST:event_btnDesaprobadoActionPerformed

    private void btnAprobarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAprobarMouseEntered
        btnAprobar.setBackground(new Color(0,56,110));
    }//GEN-LAST:event_btnAprobarMouseEntered

    private void btnAprobarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAprobarMouseExited
        btnAprobar.setBackground(new Color(0,67,135));
    }//GEN-LAST:event_btnAprobarMouseExited

    private void btnAprobarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAprobarActionPerformed
        int filaSeleccionada = obtenerFilaSeleccionada();
    String idSeleccionado = modeloTabla.getValueAt(filaSeleccionada, 0).toString();
    int id = Integer.parseInt(idSeleccionado);
    
    // Crear el curso aprobado
    CursosFinalizados cursoAprobado = new CursosFinalizados(this.curso, "aprobado");
    
    // Iterar sobre la lista de alumnos
    ArrayList<Alumno> alumnos = instituto.getAlumnos();
    for (Alumno alumno : alumnos) {
        if (id == alumno.getId()) {
            // Verificar si el curso ya está en la lista de cursos finalizados del alumno
            boolean cursoEncontrado = false;
            for (CursosFinalizados cursoFinalizado : alumno.getCursosFinalizados()) {
                if (cursoFinalizado.getCurso().equals(this.curso)) {
                    // El curso ya está en la lista de cursos finalizados
                    // Actualizar el estado del curso
                    cursoFinalizado.setEstado("aprobado");
                    cursoEncontrado = true;
                    break;
                }
            }
            // Si el curso no se encontró en la lista de cursos finalizados, agregarlo
            if (!cursoEncontrado) {
                alumno.agregarCursoFinalizado(cursoAprobado);
            }
            // Actualizar el estado del alumno a 'aprobado' para este curso
            alumno.actualizarEstadoCurso(this.curso, "aprobado");
            // Romper el bucle una vez que se haya encontrado el alumno
            break;
        }
        }
        modeloTabla.setRowCount(0);
        cargarTabla(modeloTabla);
        serializarInstituto();
    }//GEN-LAST:event_btnAprobarActionPerformed
    
   public void cargarTabla(DefaultTableModel modeloTabla) {
    ArrayList<Alumno> alumnosCurso = curso.getAlumnos();

    for (Alumno alumno : alumnosCurso) {
        String estado = "nulo"; // Estado por defecto
        
        ArrayList<CursosFinalizados> cf = alumno.getCursosFinalizados();
        if (cf != null) {
            for (CursosFinalizados cursoFinalizado : cf) {
                if (cursoFinalizado.getCurso().getId() == this.curso.getId()) {
                    estado = cursoFinalizado.getEstado();
                    break; // No es necesario seguir buscando si se encontró el curso finalizado
                }
            }
        }

        Object[] fila = {alumno.getId(), alumno.getNombre(), alumno.getApellido(), estado};
        modeloTabla.addRow(fila);
    }
}
        private int obtenerFilaSeleccionada(){
            return jTable1.getSelectedRow();
        }
        
    public void serializarInstituto()
    {
        try {
            FileOutputStream archivoSalida = new FileOutputStream("instituto_serializados.dat");
            ObjectOutputStream objetoSalida = new ObjectOutputStream(archivoSalida);
            objetoSalida.writeObject(instituto);
            objetoSalida.close();
            archivoSalida.close();
        }
        catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAprobar;
    private javax.swing.JButton btnAusente;
    private javax.swing.JButton btnDesaprobado;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblRegresar;
    // End of variables declaration//GEN-END:variables
}
